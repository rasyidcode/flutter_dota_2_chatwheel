// Mocks generated by Mockito 5.0.10 from annotations
// in flutter_dota_2_chatwheel/test/data/network/chatwheel_data_source_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:convert' as _i10;
import 'dart:typed_data' as _i11;

import 'package:flutter_dota_2_chatwheel/data/model/chatwheel_event.dart'
    as _i7;
import 'package:flutter_dota_2_chatwheel/data/model/chatwheel_event_result.dart'
    as _i4;
import 'package:flutter_dota_2_chatwheel/data/model/chatwheel_line.dart' as _i5;
import 'package:flutter_dota_2_chatwheel/data/model/chatwheel_pack.dart' as _i6;
import 'package:flutter_dota_2_chatwheel/data/scraper/chatwheel_scraper.dart'
    as _i13;
import 'package:html/dom.dart' as _i14;
import 'package:http/src/base_request.dart' as _i12;
import 'package:http/src/client.dart' as _i8;
import 'package:http/src/response.dart' as _i2;
import 'package:http/src/streamed_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeResponse extends _i1.Fake implements _i2.Response {}

class _FakeStreamedResponse extends _i1.Fake implements _i3.StreamedResponse {}

class _FakeChatwheelEventResult extends _i1.Fake
    implements _i4.ChatwheelEventResult {}

class _FakeChatwheelLine extends _i1.Fake implements _i5.ChatwheelLine {}

class _FakeChatwheelPack extends _i1.Fake implements _i6.ChatwheelPack {}

class _FakeChatwheelEvent extends _i1.Fake implements _i7.ChatwheelEvent {}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i8.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i9.Future<_i2.Response>);
  @override
  _i9.Future<_i2.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i9.Future<_i2.Response>);
  @override
  _i9.Future<_i2.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i9.Future<_i2.Response>);
  @override
  _i9.Future<_i2.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i9.Future<_i2.Response>);
  @override
  _i9.Future<_i2.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i9.Future<_i2.Response>);
  @override
  _i9.Future<_i2.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i10.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i2.Response>.value(_FakeResponse()))
          as _i9.Future<_i2.Response>);
  @override
  _i9.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
  @override
  _i9.Future<_i11.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i11.Uint8List>.value(_i11.Uint8List(0)))
          as _i9.Future<_i11.Uint8List>);
  @override
  _i9.Future<_i3.StreamedResponse> send(_i12.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<_i3.StreamedResponse>.value(_FakeStreamedResponse()))
          as _i9.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [ChatwheelScraper].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatwheelScraper extends _i1.Mock implements _i13.ChatwheelScraper {
  MockChatwheelScraper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ChatwheelEventResult getEvents(String? responseBody) =>
      (super.noSuchMethod(Invocation.method(#getEvents, [responseBody]),
              returnValue: _FakeChatwheelEventResult())
          as _i4.ChatwheelEventResult);
  @override
  _i4.ChatwheelEventResult getEvents2(String? responseBody) =>
      (super.noSuchMethod(Invocation.method(#getEvents2, [responseBody]),
              returnValue: _FakeChatwheelEventResult())
          as _i4.ChatwheelEventResult);
  @override
  _i5.ChatwheelLine getLine(_i14.Element? audio) =>
      (super.noSuchMethod(Invocation.method(#getLine, [audio]),
          returnValue: _FakeChatwheelLine()) as _i5.ChatwheelLine);
  @override
  _i6.ChatwheelPack getPack(_i14.Element? audio) =>
      (super.noSuchMethod(Invocation.method(#getPack, [audio]),
          returnValue: _FakeChatwheelPack()) as _i6.ChatwheelPack);
  @override
  _i6.ChatwheelPack getPack2(_i14.Element? tr) =>
      (super.noSuchMethod(Invocation.method(#getPack2, [tr]),
          returnValue: _FakeChatwheelPack()) as _i6.ChatwheelPack);
  @override
  _i7.ChatwheelEvent getEvent(_i14.Element? audio) =>
      (super.noSuchMethod(Invocation.method(#getEvent, [audio]),
          returnValue: _FakeChatwheelEvent()) as _i7.ChatwheelEvent);
}
